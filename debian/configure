#!/usr/bin/python
#
# Copyright 2014 Sebastian Kuzminsky
#
# Debian source package configuration script for LinuxCNC.
#


import sys
import os
import glob
import re
import subprocess


#
# Important state variables.  These get built up as the program runs.
#

flavors = set()        # enabled flavor names
build_depends = set()  # packages we build-depend on
depends = set()        # packages we (runtime) depend on
recommends = set()     # packages we (runtime) recommend
src_configure = set()  # arguments passed to src/configure to select build flavors
config = {}            # random jumble of extra config variables


def usage():
    print """\
usage: debian/configure [OPTIONS]
configure debian source package
OPTIONS:
    --help, -h    This help.
    --posix, sim  Configure for the Posix flavor only.
    -r            Configure for the running realtime flavor (and Posix).
    --all         Detect all available realtime flavors (installed and
                  not), configure for all of them (and Posix).
"""


#
# This function inspects the config file of the specified installed kernel
# version.
# If it finds a realtime flavor, it appends the detected flavor to flavors,
# appends the flavor-appropriate packages to build_depends, depends, and
# recommends
# If the specified kernel does not provide a realtime flavor, it prints an
# error message and exits.
#
def configure_for_installed_realtime_kernel(kernel_version):
    global flavors
    global build_depends
    global depends
    global recommends

    try:
        f = open("/boot/config-%s" % kernel_version)
    except IOError:
        print "no kernel configuration found for %s" % kernel_version
        sys.exit(1)
    l = f.read(-1)
    f.close()

    config_ipipe = re.search('^CONFIG_IPIPE', l, re.MULTILINE)
    config_xeno = re.search('^CONFIG_XENO_', l, re.MULTILINE)
    config_rtpreempt = re.search('^CONFIG_PREEMPT_RT', l, re.MULTILINE)

    if config_ipipe and not config_xeno and not config_rtpreempt:
        flavors.add('rtai')
        build_depends.add("linux-headers-%s" % kernel_version)
        build_depends.add("rtai-modules-%s" % kernel_version)
        recommends.add("rtai-modules-%s" % kernel_version)

    elif config_ipipe and config_xeno and not config_rtpreempt:
        flavors.add('xenomai')
        flavors.add('xenomai-kernel')
        build_depends.add('libpth-dev')
        build_depends.add("linux-headers-%s" % kernel_version)
        build_depends.add('libxenomai-dev')
        build_depends.add('libudev-dev')
        recommends.add('libxenomai1')
        recommends.add('xenomai-runtime')

    elif not config_ipipe and not config_xeno and config_rtpreempt:
        flavors.add('rtpreempt')
        build_depends.add('libpth-dev')
        build_depends.add('libudev-dev')

    else:
        print "kernel %s has no realtime extensions" % kernel_version
        sys.exit(1)

    # We don't Depend on the realtime kernel, we only Recommend it, because
    # the posix flavor will still work without it.
    recommends.add("linux-image-%s" % kernel_version)


def configure_for_distro():
    global build_depends
    global depends
    global config

    # 'Ubuntu' or 'Debian'
    distributor_id = subprocess.Popen(["lsb_release", "--id", "--short"], stdout=subprocess.PIPE).communicate()[0]
    distributor_id = distributor_id[:-1]  # strip trailing newline

    # for example '12.04' or '7.3.0'
    release = subprocess.Popen(["lsb_release", "--short", "--release"], stdout=subprocess.PIPE).communicate()[0]
    release = release[:-1]  # strip trailing newline

    print "configuring for %s %s" % (distributor_id, release)

    # configure the tcl/tk version
    # Lucid's default tcl/tk version is 8.4, we need to override it to 8.5
    # all other distros can use the default version
    if distributor_id == 'Ubuntu' and release == '10.04':
        build_depends.add('tcl8.5-dev')
        build_depends.add('tk8.5-dev')
        depends.add('tcl8.5')
        depends.add('tk8.5')
    else:
        build_depends.add('tcl-dev')
        build_depends.add('tk-dev')
        depends.add('tcl')
        depends.add('tk')

    # 'extra-dir' selects a directory (in debian/) to include in the main
    # deb.  This one is not actually distro-dependent currently (all
    # distros use the same extra-files dir), but it seems like we might
    # want it to be at some point.
    config['extra-dir'] = 'extras'


def append_file(additional_filename, base_filename):
    base_file = open(base_filename, 'a')
    additional_file = open(additional_filename, 'r')
    base_file.write(additional_file.read())
    additional_file.close()
    base_file.close()


def add_flavor_to_control(flavor):
    subst('control.%s.in' % flavor, 'control.%s' % flavor)
    append_file('control.%s' % flavor, 'control')


def subst(infile, outfile):
    global build_depends
    global depends
    global recommends
    global config

    try:
        retcode = subprocess.call(
            "sed -e 's|@BUILD_DEPENDS@|%s|g'" % ', '.join(build_depends)
            + " -e 's|@DEPENDS@|%s|g'" % ', '.join(depends)
            + " -e 's|@RECOMMENDS@|%s|g'" % ', '.join(recommends)
            + " -e 's|@SRC_CONFIGURE@|%s|g'" % ' '.join(src_configure)
            + " -e 's|@PYTHON_VERSION@|%d.%d|g'" % (sys.version_info[0], sys.version_info[1])
            + " -e 's|@PYTHON_VERSION_NEXT@|%d.%d|g'" % (sys.version_info[0], 1 + sys.version_info[1])
            + " -e 's|@EXTRA_DIR@|%s|g'" % config['extra-dir']
            + " -e 's|@POSIX_DEPENDS@|%s|g'" % ''
            + " -e 's|@POSIX_RECOMMENDS@|%s|g'" % ''
            + " -e 's|@RTAI_DEPENDS@|%s|g'" % ''
            + " -e 's|@RTAI_RECOMMENDS@|%s|g'" % ''
            + " -e 's|@RTPREEMPT_DEPENDS@|%s|g'" % ''
            + " -e 's|@RTPREEMPT_RECOMMENDS@|%s|g'" % ''
            + " %s > %s" % (infile, outfile),
            shell=True
        )
        if retcode < 0:
            print >>sys.stderr, "Child was terminated by signal", -retcode
    except OSError:
        print >>sys.stderr, "Failed to run sed!"


# posix is always enabled
flavors.add('posix')


if len(sys.argv) == 1 or sys.argv[1] == '-h' or sys.argv[1] == '--help':
    usage()
    sys.exit(0)

elif sys.argv[1] == '--posix' or sys.argv[1] == 'sim':
    # the user just wants posix, and it's always enabled (above)
    pass

elif sys.argv[1] == '-r' or sys.argv[1] == '-a':
    running_kernel_version = os.uname()[2]
    print "configuring for running realtime kernel %s" % running_kernel_version
    configure_for_installed_realtime_kernel(running_kernel_version)

elif sys.argv[1] == '--all':
    # detect_available_realtime_kernels
    print "Not implemented yet!"
    sys.exit(1)

else:
    print "invalid command line"
    usage
    sys.exit(1)


configure_for_distro()


for flavor in (flavors):
    if flavor == 'posix':
        build_depends.add('libpth-dev')
        src_configure.add('--with-posix')

    elif flavor == 'rtai':
        recommends.add('hostmot2-firmware')
        src_configure.add('--with-rtai-kernel')

    elif flavor == 'xenomai':
        recommends.add('hostmot2-firmware')
        src_configure.add('--with-xenomai')

    elif flavor == 'xenomai-kernel':
        recommends.add('hostmot2-firmware')
        src_configure.add('--with-xenomai-kernel')

    elif flavor == 'rtpreempt':
        recommends.add('hostmot2-firmware')
        src_configure.add('--with-rt-preempt')

    else:
        print "Warning: ignoring unknown flavor %s" % flavor
        flavors.remove(flavor)


#
# All done configuring!  Time to start creating debian files!
# First report what we're doing.
#

print "enabled flavors: " + ', '.join(flavors)
print "Build-Depends: " + ', '.join(build_depends)
print "Depends: " + ', '.join(depends)
print "Recommends: " + ', '.join(recommends)


subst('control.in', 'control')
for flavor in (flavors):
    add_flavor_to_control(flavor)

subst('rules.in', 'rules')
mode = os.stat('rules').st_mode
mode |= 0111
os.chmod('rules', mode)

for infile in glob.glob('*.files.in'):
    cooked_file = infile[:-3]
    subst(infile, cooked_file)

    extra_file = config['extra-dir'] + '/' + cooked_file
    if os.access(extra_file, os.R_OK):
        append_file(extra_file, cooked_file)


ignore = """


function detect_available_realtime_kernels() {
    global flavors
    global build_depends
    global depends
    global recommends

    RTAI_HEADERS=$(apt-cache search 'linux-headers.*-rtai')
    XENOMAI_HEADERS=$(apt-cache search 'linux-headers.*-xenomai')
    RTPREEMPT_HEADERS=$(apt-cache search 'linux-headers.*-rt([^a]|$)')

    if [ ! -z "$RTAI_HEADERS" ]; then
        echo found rtai headers:
        echo $RTAI_HEADERS
    fi

    if [ ! -z "$XENOMAI_HEADERS" ]; then
        echo found xenomai headers:
        echo $XENOMAI_HEADERS
    fi

    if [ ! -z "$RTPREEMPT_HEADERS" ]; then
        echo found rtpreempt headers:
        echo $RTPREEMPT_HEADERS
    fi
}


"""
